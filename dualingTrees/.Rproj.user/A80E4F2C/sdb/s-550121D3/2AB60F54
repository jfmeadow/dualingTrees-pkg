{
    "collab_server" : "",
    "contents" : "\n\nPrepare data: \n\n* read trees and data\n* go through selection and filtering\n* align but leave some mismatches in for example dataaset\n* save cleanish data objects\n\n\n\nInput\n\n* two trees\n  * must have names, internal nodes, \n  * add roots and get ready to plot\n\n* Corr matrix\n  * must have names that agree with trees, \n  * trim names from both sides to min set\n  * set plot parameters? or later in plot? \n  * return complex list including\n    * trees\n    * corr mat = all matching\n    * maybe lined up, or wait for plotting instructions\n    \n\n    \n    \n\n\n\n\n\n\n```{r loadPackages}\nset.seed(42)\nlibrary(ape)\n# library(phytools)\n# library(labdsv)\nlibrary(vegan)\nlibrary(wesanderson)\nlibrary(magrittr)\nlibrary(dplyr)\nlibrary(scales)\n```\n\n\n## Functions\n\n```{r}\n# setwd('~/Dropbox (Personal)/MycoDB_DataPaper/Rmarkdown/')\nsource('mycoDB_functions.R')\n```\n\n\n\n\n##  Load Data Paper Dataset\n\n\n### Trees\n\n\n\n## Dualing Tree Figure Setup\n\n```{r readTrees}\np.phylo.big <- read.tree('../data/BigPlantTree_pruned.txt')\nf.phylo.big <- read.tree('../data/BigFungalTree_pruned.txt')\n\nnames(f.phylo.big)\np.phylo.big\nf.phylo.big\nplot.phylo(p.phylo.big %>% ladderize, show.tip.label=FALSE, no.margin=TRUE)\n```\n\n\n```{r readSummarizeData}\n# setwd('~/Dropbox (Personal)/MycoDB_DataPaper/Rmarkdown/')\n# dat <- read.csv('../data/datapaper_data_v9_11Jan2016.csv', head=TRUE)\n# dim(dat)\n# names(dat)\n# head(dat)\n```\n\n```{r readSubsetData}\ndatAM <- read.csv('../data/AMsub.csv', head=TRUE, stringsAsFactors=FALSE)\n# datAM <- dat[dat$AMsub == 'YES', ]\ndim(datAM)\ndatEM <- read.csv('../data/EMsub.csv', head=TRUE, stringsAsFactors=FALSE)\n# datEM <- dat[dat$EMsub == 'YES', ]\n## This has also control plants, so doesn't add up. That's Ok. \ndim(datEM); dim(datAM) \nnames(datAM)\nnames(datEM)\nsetdiff(names(datEM), names(datAM))\nsetdiff(names(datAM), names(datEM)); all(names(datAM) %in% names(datEM))\n```\n\n```{r}\nwhich(names(datEM) == 'HOSTPLANTFEMILY')\nidentical(names(datEM)[-55], names(datAM))\ndatEM <- datEM[, names(datAM)]\ndatEM$EMsub <- 'YES'\ndatEM$AMsub <- 'NO'\ndatAM$AMsub <- 'YES'\ndatAM$EMsub <- 'NO'\n\ndatAM %<>% select(EXPERIMENTID, CTLTRTSETID, NONCTLTRTSETID, Id, \n                 EFFECTSIZE1, ESTVAR1, ESTVAR2, ESTVAR3, ctrl_mass, \n                 PlantFamily, PlantSpecies, FungalGenus, MYCORRHIZAETYPE, \n                 ei, zi, AMsub, EMsub)\ndatEM %<>% select(EXPERIMENTID, CTLTRTSETID, NONCTLTRTSETID, Id, \n                 EFFECTSIZE1, ESTVAR1, ESTVAR2, ESTVAR3, ctrl_mass, \n                 PlantFamily, PlantSpecies, FungalGenus, MYCORRHIZAETYPE, \n                 ei, zi, AMsub, EMsub)\n\n## fix rhizophagus(old) to rhizoglomus(new)\ndatAM$FungalGenus <- gsub('rhizophagus', 'rhizoglomus', datAM$FungalGenus)\n\ndatES <- bind_rows(datEM, datAM)\ndim(datES)\nstr(datAM)\nstr(datES)\n\n\n# datA %>%\n#   group_by(plantxfungus) %>%\n#   summarize(mean=mean(ei)) %>%\n#   data.frame\n\n\n```\n\n\n\n```{r}\n# setwd('~/Dropbox (Personal)/data_science/dualing_trees/')\n\n# save(datAM, datEM, datES, f.phylo.big, p.phylo.big, file='WORKING_FORMAT.RData')\n```\n\n\n\n\n\n\n```{r}\n# setwd('~/Dropbox (Personal)/data_science/dualing_trees/')\n# load('WORKING_FORMAT.RData')\nsource('mycoDB_functions.R')\n```\n\n\n\n\n\n\n\n\n\n\n\n```{r capitalizeNames}\ndatES$plantName <- sapply(as.character(datES$PlantSpecies), FUN=simple_cap)\ndatES$fungalName <- sapply(as.character(datES$FungalGenus), FUN=simple_cap)\n\np.phylo.big$tip.label %<>% sapply(FUN=simple_cap, USE.NAMES=FALSE)\nf.phylo.big$tip.label %<>% sapply(FUN=simple_cap, USE.NAMES=FALSE)\n```\n\n\n\nGet table of unique combinations, in order\n\n```{r }\ncombinations <- \n  paste(datES$plantName, datES$fungalName, sep=' X ') %>% \n  table %>% sort %>% rev\n\nlength(combinations)\n```\n\n\n\n\n\n\n\n\n\n\n\n\n```{r checkData}\n#head(dat)\nall(as.character(unique(datES$plantName)) %in% p.phylo.big$tip.label)\nall(as.character(unique(datES$fungalName)) %in% f.phylo.big$tip.label)\nsetdiff(as.character(unique(datES$fungalName)), f.phylo.big$tip.label)\n\n```\n\n```{r trimNAs}\nany(is.na(datES$FungalGenus))  # check this first. Currently none. \ndatTrim <- datES \ndim(datES); dim(datTrim)\n\n\np.phylo.trim <- prune_sample(as.character(unique(datTrim$plantName)), p.phylo.big)\nf.phylo.trim <- prune_sample(as.character(unique(datTrim$fungalName)), f.phylo.big)\n```\n\n\n\n\n```{r createPlottingTreesMatrix}\n# Create plotting set of trees\np_phylo <- p.phylo.trim\nf_phylo <- f.phylo.trim\ndat <- datTrim\n```\n\n\n\n\n\n```{r}\n\n# setwd('~/Dropbox (Personal)/data_science/dualing_trees/')\n# rm(list=ls())\n# load(file='WORKING_FORMAT_TRIM.RData')\n# source('mycoDB_functions.R')\n# library(magrittr)\n# library(ape)\n# library(dplyr)\n\n\n# save(p_phylo, f_phylo, dat, file='WORKING_FORMAT_TRIM.RData')\n```\n\n\n\n\n\n\n```{r}\n\n# setwd('/Users/jamesmeadow/Dropbox (Personal)/MycoDB_DataPaper/Rmarkdown/dualingTrees_package_working_files/working')\n\n# load('WORKING_FORMAT_TRIM.RData')\nlibrary(magrittr)\nlibrary(dplyr)\ndat %<>% \n  dplyr::select(fungalName, plantName, ei, MYCORRHIZAETYPE) %>% \n  magrittr::set_colnames(c('fungal_name', 'plant_name', 'ei', 'mycorrhizae_type'))\nhead(dat)\nmycor_ei <- dat\nfungal_tree <- f_phylo\nplant_tree <- p_phylo\nls()\n\nsave.image('WORKING_FORMAT_TRIM_2.RData')\n\ntrees_list <- input_trees(x_tree = fungal_tree,\n                          y_tree = plant_tree,\n                          x_key = mycor_ei$fungal_name,\n                          y_key = mycor_ei$plant_name,\n                          response = mycor_ei$ei,\n                          response_type = mycor_ei$mycorrhizae_type,\n                          bubble_scale=5, \n                          x_lab_cutoff = NULL,\n                          y_lab_cutoff = 1.4,\n                          x_node_labs = NULL,   \n                          y_node_labs = c('fabaceae', 'betulaceae', \n                                          'rosaceae', 'myrtaceae', \n                                          'asteraceae', 'poaceae', \n                                          'pinaceae'))\n\n\n\n\n##############################################################\n## vector for x tree edge colors.\nx_tree_cols <- rep('gray40', length(trees_list$x_tree$edge.length))\nx_tree_cols[1:65] <- '#b154a0'\nx_tree_cols[66:94] <- '#51ad4f'\n##############################################################\n\n\n\n##############################################################\nplot_trees(trees_list = trees_list,\n           pn_cols = c('#409ab1', '#dd1d18'),\n           x_tree_col = x_tree_cols,\n           x_type_cols = c('#51ad4f', '#b154a0'),\n           y_type_cols = c('#51ad4f', '#b154a0', '#5a1b1a'),\n           x_bar_axis_offset = .5, \n           y_bar_axis_offset = .5, \n           pdf_filename = NULL)\n\n\n\n```\n\n\n\nNew version of EM that JH sent on March 10. \n\n```{r}\n\n# setwd('/Users/jamesmeadow/Dropbox (Personal)/MycoDB_DataPaper/Rmarkdown/dualingTrees_package_working_files/working')\n# load('WORKING_FORMAT_TRIM.RData')\n# load('MycoDB_for_James_10Mar2017.RData')\n\nblup <- \n  plantxfungus_blups_EM %>% \n  mutate(combo = row.names(.)) %>% \n  mutate(plant = gsub('XX[[:alpha:]]{1,}$', '', .$combo)) %>% \n  mutate(fungus = gsub('^[[:graph:]]{1,}XX', '', .$combo))\nhead(blup)\n\n\nlibrary(magrittr)\nlibrary(dplyr)\n\nsave.image('WORKING_FORMAT_TRIM_BLUP.RData')\n\nblup_trees_list <- input_trees(x_tree = EMfungi.tree,\n                               y_tree = EMplant.tree,\n                               x_key = blup$fungus,\n                               y_key = blup$plant,\n                               response = blup$intrcpt,\n                               response_type = NULL,\n                               bubble_scale=5, \n                               x_lab_cutoff = NULL,\n                               y_lab_cutoff = NULL,\n                               x_node_labs = NULL,   \n                               y_node_labs = NULL)\n# c('fabaceae', 'betulaceae', \n# 'rosaceae', 'myrtaceae', \n# 'asteraceae', 'poaceae', \n# 'pinaceae'))\n\n\n\n\n##############################################################\n## vector for x tree edge colors.\n# x_tree_cols <- rep('gray40', length(trees_list$x_tree$edge.length))\n# x_tree_cols[1:65] <- '#b154a0'\n# x_tree_cols[66:94] <- '#51ad4f'\n##############################################################\n\n\n\n##############################################################\nplot_trees(trees_list = blup_trees_list,\n           pn_cols = c('#409ab1', '#dd1d18'),\n           x_tree_col = 'gray40',\n           x_bar_axis_offset = .5, \n           y_bar_axis_offset = .5, \n           pdf_filename = NULL)\n\n\n\n```\n\n\n\n```{r}\nmycor_ei %>% head\nblup %>% head\nls()\nfungal_tree_blup <- EMfungi.tree\nplant_tree_blup <- EMplant.tree\n\n\nsave(mycor_ei, file='~/Dropbox (Personal)/R_stuff/dualingTrees-pkg/dualingTrees/data/mycor_ei.RData')\nsave(blup, file='~/Dropbox (Personal)/R_stuff/dualingTrees-pkg/dualingTrees/data/blup.RData')\nsave(fungal_tree, file='~/Dropbox (Personal)/R_stuff/dualingTrees-pkg/dualingTrees/data/fungal_tree.RData')\nsave(plant_tree, file='~/Dropbox (Personal)/R_stuff/dualingTrees-pkg/dualingTrees/data/plant_tree.RData')\nsave(fungal_tree_blup, file='~/Dropbox (Personal)/R_stuff/dualingTrees-pkg/dualingTrees/data/fungal_tree_blup.RData')\nsave(plant_tree_blup, file='~/Dropbox (Personal)/R_stuff/dualingTrees-pkg/dualingTrees/data/plant_tree_blup.RData')\n\n\n\n\n```\n\n\n\n",
    "created" : 1494476607838.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1767691086",
    "id" : "2AB60F54",
    "lastKnownWriteTime" : 1494977984,
    "last_content_update" : 1494977984998,
    "path" : "~/Dropbox (Personal)/MycoDB_DataPaper/Rmarkdown/dualingTrees_package_working_files/working/FORMAT_MYCODB.Rmd",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 14,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}